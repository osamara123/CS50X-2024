[CEO]
include=> manager
include=> ccmanager
include=> Technical
include=> customers
include=> agents

exten => 999,1,Dial(sip/999,15,xX)
    same => n,Hangup()
 
[manager]
exten => 6,1,Dial(sip/6,15,xX)
    same => n,Hangup()

exten => 7,1,Dial(sip/7,15,xX)
    same => n,Hangup()

include=> manager 
include=> ccmanager
include=> Technical
include=> customers
include=> agents
include=> CEO

[Technical]
include=> Technical
include=> customers
include=> ccmanager
include=> agents

exten => 999,1,Playback(pbx-invalid)
    same => n,Hangup()
    
exten => 7,1,Playback(pbx-invalid)
    same => n,Hangup()
    
exten => 6,1,Playback(pbx-invalid)
    same => n,Hangup()

exten => 5,1,Playback(pbx-invalid)
    same => n,Hangup()
    
exten => 4,1,Dial(sip/4,15,xX)
    same => n,Hangup()


[ccmanager]
include=> manager 
include=> ccmanager
include=> Technical
include=> agents
    
; Manager (Call center manager)
exten => 5,1,Dial(sip/5,15,xX)
    same => n,Hangup()


[agents]  
include=> ccmanager
include=> Technical
include=> agents
include=> customers

exten => 1001,1,Answer()
    same => n,Dial(SIP/1001,15,xX)
    same => n,Hangup()
    
exten => 1002,1,Answer()
    same => n,Dial(SIP/1002,15,xX)
    same => n,Hangup()
   
exten => 999,1,Playback(pbx-invalid)
    same => n,Hangup()
    
exten => 6,1,Playback(pbx-invalid)
    same => n,Hangup()

exten => 7,1,Playback(pbx-invalid)
    same => n,Hangup()

[Satisfictionteam]
exten => 2001,1,Answer()
    same => n,Dial(SIP/2001,15,xX)
    same => n,Hangup()

exten => 2002,1,Answer()
    same => n,Dial(SIP/2002,15,xX)
    same => n,Hangup()

[customers]
; Customer 5001 (Only call 123 allowed)
exten => 5001,1,Answer()
    same => n,Dial(SIP/5001,15)
    same => n,Hangup()

; Customer 5002
exten => 5002,1,Answer()
    same => n,Dial(SIP/5002,15)
    same => n,Hangup()

; Customer 5003
exten => 5003,1,Answer()
    same => n,Dial(SIP/5003,15)
    same => n,Hangup()

; If customer calls 123, handle input and route
exten => 123,1,Answer()
    same => n,Playback(hello-world)   ; Optional greeting message
    same => n,Playback(select-language)   ; Play prompt for language selection
    same => n,Background(tt-weasels)   ; Background prompt for user input
    same => n,WaitExten(7)  ; Wait for user input

; Handle user input for 123 (Arabic, English, French queues)
exten => 1,1,Answer()
    same => n(repeat),Playback(hello-world) ; Prompt to enter the number
    same => n,Background(callbackrequest) ;if you want press 1 not press2
    same => n,Read(temp,,1)
    ;same => n,Set(xy=${tmp})
    same => n,GotoIf($[${temp}=1]?past2:next)
    same => n,WaitExten(5)
    same => n(past2),background(enterten)
    same => n,Read(CALLBACK_NUMBER,,4) ; Collect number (max 4 digits)
    same => n,Playback(yournumb) ; Playback confirmation
    same => n,SayDigits(${CALLBACK_NUMBER})
    ;same => n,System(/bin/echo '${CALLBACK_NUMBER}' >> /home/osamara/Downloads/callback_numbers.txt) ; Save
    same => n,background(correct) ; Confirmation prompt
    same => n,Read(temp2,,1)
    ;same => n,Set(y=${tmp2})
    same => n,GotoIf($[${temp2}=1]?next2:past2)
    same => n,WaitExten(5)
    same => n(next2),NoOp(NumberConfirmed)
    same => n,System(/bin/echo '${CALLBACK_NUMBER}' >> /home/osamara/Downloads/callback_numbers.txt)
    same => n,Playback(thank) ; saved
    same => n,Hangup()
    same => n(next),Playback(waitagent)
    same => n,ExecIf($["${CALLERID(num)}" = "5001"]?Set(QUEUE_PRIO=10)) 
    same => n,MixMonitor(${CALLERID(num)}-to-Customer-${EXTEN}-${UNIQUEID}.wav) ; Record all customer calls
    same => n,Queue(arabic_queue,txX,15)  ; Send call to Arabic queue
    same => n,Hangup()
    same => n,StopMixMonitor()

exten => t,1,Hangup()
   
exten => 2,1,Answer()
    same => n(repeate),Playback(hello-world) ; Prompt to enter the number
    same => n,Background(callbackrequest2) ;if you want press 1 not press2
    same => n,Read(tempe,,1)
    same => n,GotoIf($[${tempe}=1]?paste2:nexte)
    same => n,WaitExten(5)
    same => n(paste2),background(enterten2)
    same => n,Read(CALLBACK_NUMBER,,4) ; Collect number (max 4 digits)
    same => n,Playback(yournumb2) ; Playback confirmation
    same => n,SayDigits(${CALLBACK_NUMBER})
    ;same => n,System(/bin/echo '${CALLBACK_NUMBER}' >> /home/osamara/Downloads/callback_numbers.txt) ; Save
    same => n,background(correct2) ; Confirmation prompt
    same => n,Read(tempe2,,1)
    same => n,GotoIf($[${tempe2}=1]?nexte2:paste2)
    same => n,WaitExten(5)
    same => n(nexte2),NoOp(NumberConfirmed)
    same => n,System(/bin/echo '${CALLBACK_NUMBER}' >> /home/osamara/Downloads/callback_numbers.txt)
    same => n,Playback(thanke) ; saved
    same => n,Hangup()
    same => n(nexte),Playback(waitagentee)
    same => n,ExecIf($["${CALLERID(num)}" = "5001"]?Set(QUEUE_PRIO=10)) 
    same => n,MixMonitor(${CALLERID(num)}-to-Customer-${EXTEN}-${UNIQUEID}.wav) ; Record all customer calls
    same => n,Queue(english_queue,txX,15)  ; Send call to Arabic queue
    same => n,Hangup()
    same => n,StopMixMonitor()

exten => t,1,Hangup()


exten => 3,1,Answer()
     same => n(repeatf),Playback(hello-world) ; Prompt to enter the number
    same => n,Background(callbackrequest3) ;if you want press 1 not press2
    same => n,Read(tempf,,1)
    same => n,GotoIf($[${tempf}=1]?pastf2:nextf)
    same => n,WaitExten(5)
    same => n(pastf2),background(enterten3)
    same => n,Read(CALLBACK_NUMBER,,4) ; Collect number (max 4 digits)
    same => n,Playback(yournumb3) ; Playback confirmation
    same => n,SayDigits(${CALLBACK_NUMBER})
    ;same => n,System(/bin/echo '${CALLBACK_NUMBER}' >> /home/osamara/Downloads/callback_numbers.txt) ; Save
    same => n,background(correct3) ; Confirmation prompt
    same => n,Read(tempf2,,1)
    same => n,GotoIf($[${tempf2}=1]?nextf2:pastf2)
    same => n,WaitExten(5)
    same => n(nexte2),NoOp(NumberConfirmed)
    same => n,System(/bin/echo '${CALLBACK_NUMBER}' >> /home/osamara/Downloads/callback_numbers.txt)
    same => n,Playback(thankf) ; saved
    same => n,Hangup()
    same => n(nextf),Playback(waitagentef)
    same => n,ExecIf($["${CALLERID(num)}" = "5001"]?Set(QUEUE_PRIO=10)) 
    same => n,MixMonitor(${CALLERID(num)}-to-Customer-${EXTEN}-${UNIQUEID}.wav) ; Record all customer calls
    same => n,Queue(french_queue,txX,15)  ; Send call to Arabic queue
    same => n,Hangup()
    same => n,StopMixMonitor()

exten => t,1,Hangup()

; Invalid input
exten => i,1,Playback(pbx-invalid)   ; Invalid input message
    same => n,Hangup()

; Timeout (no input provided)
exten => t,1,Playback(vm-goodbye)   ; Timeout message
    same => n,Hangup()

; Queueing for Arabic, English, French (used for agent routing based on customer input)
exten => 111,1,Answer()
    same => n,ExecIf($["${CALLERID(num)}" = "5001"]?Set(QUEUE_PRIO=10)) 
    same => n,Queue(arabic_queue,txX,15)  ; Send call to Arabic queue
    same => n,Hangup()

exten => 112,1,Answer()
    same => n,ExecIf($["${CALLERID(num)}" = "5001"]?Set(QUEUE_PRIO=10)) 
    same => n,Queue(english_queue,txX,15)  ; Send call to Arabic queue
    same => n,Hangup()

exten => 113,1,Answer()
    same => n,ExecIf($["${CALLERID(num)}" = "5001"]?Set(QUEUE_PRIO=10)) 
    same => n,Queue(french_queue,txX,15)  ; Send call to French queue
    same => n,Hangup()
